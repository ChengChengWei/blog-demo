
spring.datasource.mysql01.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.mysql01.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.mysql01.url=jdbc:mysql://localhost:3306/test01?useUnicode=true&characterEncoding=utf8&currentSchema=public
spring.datasource.mysql01.username=root
spring.datasource.mysql01.password=123456
#config druid
#连接池的设置
#初始化时建立物理连接的个数
spring.datasource.mysql01.druid.initial-size=5
#最小连接池数量
spring.datasource.mysql01.druid.min-idle=5
#最大连接池数量 maxIdle已经不再使用
spring.datasource.mysql01.druid.max-active=20
#获取连接时最大等待时间，单位毫秒
spring.datasource.mysql01.druid.max-wait=60000
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.mysql01.druid.test-while-idle=true
#既作为检测的间隔时间又作为testWhileIdel执行的依据
spring.datasource.mysql01.druid.time-between-eviction-runs-millis=60000
#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
spring.datasource.mysql01.druid.min-evictable-idle-time-millis=30000
#用来检测连接是否有效的sql 必须是一个查询语句
#mysql中为 select 'x'
#oracle中为 select 1 from dual
spring.datasource.mysql01.druid.validation-query=select 'x'
#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
spring.datasource.mysql01.druid.test-on-borrow=false
#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
spring.datasource.mysql01.druid.test-on-return=false
#是否缓存preparedStatement,mysql5.5+建议开启
spring.datasource.mysql01.druid.pool-prepared-statements=true
#当值大于0时poolPreparedStatements会自动修改为true
spring.datasource.mysql01.druid.max-pool-prepared-statement-per-connection-size=20
#配置扩展插件
spring.datasource.mysql01.druid.filters=stat,wall
#通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.mysql01.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
#合并多个DruidDataSource的监控数据
spring.datasource.mysql01.druid.use-global-data-source-stat=true
#设置访问druid监控页的账号和密码,默认没有
spring.datasource.mysql01.druid.stat-view-servlet.login-username=admin
spring.datasource.mysql01.druid.stat-view-servlet.login-password=admin



spring.datasource.mysql02.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.mysql02.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.mysql02.url=jdbc:mysql://localhost:3306/test02?useUnicode=true&characterEncoding=utf8&currentSchema=public
spring.datasource.mysql02.username=root
spring.datasource.mysql02.password=123456
#config druid
#连接池的设置
#初始化时建立物理连接的个数
spring.datasource.mysql02.druid.initial-size=5
#最小连接池数量
spring.datasource.mysql02.druid.min-idle=5
#最大连接池数量 maxIdle已经不再使用
spring.datasource.mysql02.druid.max-active=20
#获取连接时最大等待时间，单位毫秒
spring.datasource.mysql02.druid.max-wait=60000
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.mysql02.druid.test-while-idle=true
#既作为检测的间隔时间又作为testWhileIdel执行的依据
spring.datasource.mysql02.druid.time-between-eviction-runs-millis=60000
#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
spring.datasource.mysql02.druid.min-evictable-idle-time-millis=30000
#用来检测连接是否有效的sql 必须是一个查询语句
#mysql中为 select 'x'
#oracle中为 select 1 from dual
spring.datasource.mysql02.druid.validation-query=select 'x'
#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
spring.datasource.mysql02.druid.test-on-borrow=false
#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
spring.datasource.mysql02.druid.test-on-return=false
#是否缓存preparedStatement,mysql5.5+建议开启
spring.datasource.mysql02.druid.pool-prepared-statements=true
#当值大于0时poolPreparedStatements会自动修改为true
spring.datasource.mysql02.druid.max-pool-prepared-statement-per-connection-size=20
#配置扩展插件
spring.datasource.mysql02.druid.filters=stat,wall
#通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.mysql02.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
#合并多个DruidDataSource的监控数据
spring.datasource.mysql02.druid.use-global-data-source-stat=true
#设置访问druid监控页的账号和密码,默认没有
spring.datasource.mysql02.druid.stat-view-servlet.login-username=admin
spring.datasource.mysql02.druid.stat-view-servlet.login-password=admin

### mybatis ###
mybatis.mapper-locations=classpath:mapper/**/*.xml
mybatis.configuration.map-underscore-to-camel-case=true